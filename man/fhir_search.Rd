% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/download_resources.R
\name{fhir_search}
\alias{fhir_search}
\title{Download FHIR search result}
\usage{
fhir_search(
  request = fhir_current_request(),
  body = NULL,
  username = NULL,
  password = NULL,
  token = NULL,
  add_headers = NULL,
  max_bundles = Inf,
  verbose = 1,
  delay_between_attempts = c(1, 3, 9, 27, 81),
  log_errors = NULL,
  save_to_disc = NULL,
  delay_between_bundles = 0,
  rm_tag = "div",
  max_attempts = deprecated()
)
}
\arguments{
\item{request}{An object of class \linkS4class{fhir_url} or a character vector of length one containing the full FHIR search request. It is
recommended to explicitly create the request via \code{\link[=fhir_url]{fhir_url()}} as this will do some validity checks and format the url properly.
Defaults to \code{\link[=fhir_current_request]{fhir_current_request()}}}

\item{body}{A character vector of length one or object of class \code{fhir_body} with type \code{"application/x-www-form-urlencoded"}. A body should be provided
when the FHIR search request is too long and might exceed the maximal allowed length of the URL when send to the server. In this case
a search via POST (see https://www.hl7.org/fhir/search.html#Introduction) can be used. The body should contain all the parameters that
follow after the \verb{?} in the FHIR search request. When a body is provided, the required \verb{_search} is automatically added
to the url in \code{request}. See examples and \code{?fhir_body}.}

\item{username}{A character vector of length one containing the username for basic authentication.}

\item{password}{A character vector of length one containing the password for basic authentication.}

\item{token}{A character vector of length one or object of class \link[httr:Token-class]{httr::Token}, for bearer token authentication (e.g. OAuth2). See \code{\link[=fhir_authenticate]{fhir_authenticate()}}
for how to create this.}

\item{add_headers}{A named character vector of custom headers to add to the HTTP request, e.g. \code{c(myHeader = "somevalue")} or
\code{c(firstHeader = "value1", secondHeader = "value2")}.}

\item{max_bundles}{Maximal number of bundles to get. Defaults to Inf meaning all available bundles are downloaded.}

\item{verbose}{An integer vector of length one. If 0, nothing is printed, if 1, only finishing message is printed, if > 1,
downloading progress will be printed. Defaults to 1.}

\item{delay_between_attempts}{A numeric vector specifying the delay in seconds between attempts of reaching the server
that \code{fhir_search()} will make. The length of this vector determines the number of attempts that will be made when the server can't be reached
before stopping with an error. Defaults to \code{c(1,3,9,27,81)}. If you want the function to stop immediately after the first error when trying to
reach the server, set this argument to \code{1}.}

\item{log_errors}{Either \code{NULL} or a character vector of length one indicating the name of a file in which to save the http errors.
\code{NULL} means no error logging. When a file name is provided, the errors are saved in the specified file. Defaults to \code{NULL}.
Regardless of the value of \code{log_errors} the most recent http error message within the current R session is saved internally and can
be accessed with \code{\link[=fhir_recent_http_error]{fhir_recent_http_error()}}.}

\item{save_to_disc}{Either \code{NULL} or a character vector of length one indicating the name of a directory in which to save the bundles.
If a directory name is provided, the bundles are saved as numerated xml-files into the directory specified
and not returned as a bundle list in the R session. This is useful when a lot of bundles are to be downloaded and keeping them all
in one R session might overburden working memory. When the download is complete, the bundles can be loaded into R using \code{\link[=fhir_load]{fhir_load()}}.
Defaults to \code{NULL}, i.e. bundles are returned as a list within the R session.}

\item{delay_between_bundles}{A numeric scalar specifying a time in seconds to wait between pages of the search result,
i.e. between downloading the current bundle and the next bundle. This can be used to avoid choking a weak server with
too many requests to quickly. Defaults to zero.}

\item{rm_tag}{Character vector of length 1 defining an xml tag of elements that will removed from the bundle automatically.
Defaults to \code{"div"},leading to the removal of all html parts (see Details). Set to \code{NULL} to keep the bundles untouched.
See \code{\link[=fhir_rm_div]{fhir_rm_div()}} and \code{\link[=fhir_rm_tag]{fhir_rm_tag()}} for more info.}

\item{max_attempts}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} The number of maximal attempts is now determined by the length of \code{delay_between_attempts}}
}
\value{
A \linkS4class{fhir_bundle_list} when \code{save_to_disc = NULL} (the default),  else \code{NULL}.
}
\description{
Downloads all FHIR bundles of a FHIR search request from a FHIR server by iterating through the bundles. Search via GET
and POST is possible, see Details.
}
\details{
\subsection{Request type}{

\code{fhir_search} allows for two types of search request:
\enumerate{
\item FHIR search via GET:
This is the more common approach. All information on which resources to download is contained in the URL
that is send to the server (\code{request} argument). This encompasses the base url of the server, the resource type and possible
search parameters to further qualify the search (see \code{\link[=fhir_url]{fhir_url()}}). The search via GET is the default and performed whenever
the argument \code{body} is NULL.
\item FHIR search via POST:
This option should only be used when the parameters make the search URL so long the server might deny it
because it exceeds the allowed length. In this case the search parameters (everything that would usually follow the resource type
after the \verb{?}) can be transferred to a body of type \code{"application/x-www-form-urlencoded"} and send via POST. If you provide a body in
\code{fhir_search()}, the url in \code{request} should only contain the base URL and the resource type.
The function will automatically amend it with \verb{_search} and perform a POST.
}
}

\subsection{Authentication}{

There are several ways of authentication implemented in \code{fhir_search()}. If you don't need any authentication,
just leave the arguments described in the following at their default values of \code{NULL}.
\enumerate{
\item Basic Authentication: Provide the \code{username} and the \code{password} for basic authentication in the respective arguments.
\item Token Authentication: Provide a token in the argument \code{token}, either as a character vector of length one or as as an object of class
\link[httr:Token-class]{httr::Token}. You can use the function \code{\link[=fhir_authenticate]{fhir_authenticate()}} to create this object.
}
}

\subsection{Additional headers}{

Per default, the underlying HTTP requests are equipped with \emph{Accept} and \emph{Authorization} headers. If you need to pass additional headers,
e.g. cookies for authentication or other custom headers, you can add these to the request as a named character vector using the
\code{add_headers} argument.
}

\subsection{HTML removal}{

FHIR resources can contain a considerable amount of html code (e.g. in a \href{https://www.hl7.org/fhir/narrative.html#xhtml}{narrative} object),
which is often created by the server for example to provide a human-readable summary of the resource.
This data is usually not the aim of structured statistical analysis, so in the default setting \code{\link[=fhir_search]{fhir_search()}} will remove the html
parts immediately after download to reduce memory usage (on a hapi server typically by around 30\%, see \code{\link[=fhir_rm_div]{fhir_rm_div()}}).
The memory gain is payed with a runtime increase of 10\%-20\%. The html removal can be disabled by setting \code{rm_tag = NULL}
to increase speed at the cost of increased memory usage.
}
}
\examples{
\donttest{
#the try({}, silent = TRUE) statement is only there to catch errors when the server is down
#you can skip it when the server is reachable

try({

### Search with GET

#create fhir search url

request <- fhir_url(url = "https://server.fire.ly",
                    resource = "Patient",
                    parameters = c(gender="female"))

#download bundles
bundles <- fhir_search(request, max_bundles = 5)



### Search with POST (should actually be used for longer requests)

request <- fhir_url(url = "https://server.fire.ly",
                    resource = "Patient")

body <- fhir_body(content = list(gender = "female"))

bundles <- fhir_search(request = request,
                       body = body,
                       max_bundles = 5)


 }, silent = TRUE)
 }
}
\seealso{
\itemize{
\item Creating a FHIR search request: \code{\link[=fhir_url]{fhir_url()}} and \code{\link[=fhir_body]{fhir_body()}} (for POST based search)
\item OAuth2 Authentication: \code{\link[=fhir_authenticate]{fhir_authenticate()}}
\item Saving/reading bundles from disc: \code{\link[=fhir_save]{fhir_save()}} and \code{\link[=fhir_load]{fhir_load()}}
\item Flattening the bundles: \code{\link[=fhir_crack]{fhir_crack()}}
}
}
