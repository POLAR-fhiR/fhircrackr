% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fhir_table_description.R
\name{fhir_table_description}
\alias{fhir_table_description}
\title{Create \linkS4class{fhir_table_description} object}
\usage{
fhir_table_description(
  resource,
  cols = fhir_columns(),
  sep = ":::",
  brackets = character(),
  rm_empty_cols = FALSE,
  format = "compact",
  keep_attr = FALSE
)
}
\arguments{
\item{resource}{A character vector of length one or \linkS4class{fhir_resource_type} object
indicating which resource type should be extracted.}

\item{cols}{Optional. A \linkS4class{fhir_columns} object or something that can be coerced to one,
like a (named) character vector, a (named) list containing xpath expressions,
or a \linkS4class{fhir_xpath_expression} object. See \code{\link[=fhir_columns]{fhir_columns()}} and the examples.
If this argument is omitted, an empty \linkS4class{fhir_columns} object will be supplied.
This means that in the call to \code{\link[=fhir_crack]{fhir_crack()}}, all available elements are extracted in put
in automatically named columns.}
}
\value{
An object of class \linkS4class{fhir_table_description}.
}
\description{
A \code{fhir_table_description} is part of a \code{fhir_design} and holds the information \code{\link[=fhir_crack]{fhir_crack()}} needs to flatten (aka crack)
FHIR resources from a FHIR bundle. There should be one \code{fhir_table_description} per resource type as
\code{\link[=fhir_crack]{fhir_crack()}} will create one data.frame/data.table per resource type. See Details.
}
\details{
A \code{fhir_table_description} consists of
the following elements:
\itemize{
\item The resource element: Defines the resource type (e.g. \code{Patient} or \code{Observation}). See \code{?fhir_resource}.
\item The cols element: Contains the column names and XPath expressions defining the columns to extract.
If this element is empty, \code{\link[=fhir_crack]{fhir_crack()}} will extract all available elements of the resource and name the
columns automatically. See \code{?fhir_columns}.
\item The sep element: A character of length one containing the separator string used for separating multiple entries in cells.
\item The brackets element: A characters of length one or two used for separating multiple entries in cells. The first one is the opening bracket
and the second one the closing bracket. If only one is given, both are assumed opening and closing brackets are equal.
\item The rm_empty_cols element: A logical of length one indicating whether empty columns should be removed of the resulting table or not.
\item The format element: A character of length one indicating whether the resulting table should be cracked 'wide' or 'compact'.
Cracking 'wide' means multiple entries will be distributed over several columns with indexed names.
Otherwise multiple entries will be pasted separated by 'sep' into one cell/column. Defaults to 'compact'.
\item The keep_attr element: A logical of length one indicating whether the names of the table columns end with or without the attributes' name,
e.g. name.given oder name.given.value. This effects only, if no 'cols' argument is given. That means the column names are created by
the xpath of their certain tags.
A full \code{fhir_table_description} looks for example like this:
}\preformatted{fhir_resource_type: Patient

fhir_columns:
------------ -----------------
column name | xpath expression
------------ -----------------
name        | name/family
gender      | gender
id          | id
------------ -----------------

separator            : ':::'
bracket open         : '['
bracket close        : ']'
remove empty columns : TRUE
}
}
\examples{
# a minimal table description
fhir_table_description(
    resource = 'Patient'
)

# named list for cols
fhir_table_description(
    resource = "Patient",
    cols     = list(
        id     = "id",
        name   = "name/family",
        gender = "gender"
    )
)

#unnamed character for cols, colnames are generated automatically
fhir_table_description(
    resource = "Patient",
    cols     = c(
        "id",
        "name/family",
        "gender"
    )
)

# named character for cols, and redundantly given defaults for all arguments
fhir_table_description(
    resource = 'Patient',
    cols = c(
        id            = 'id',
        name          = 'name/family',
        gender        = 'gender'
    ),
    sep           = ':::',
    brackets      = c('<|', '|>'),
    rm_empty_cols = FALSE,
    format        = 'compact',
    format        = 'compact'
)

# no column arguments is given,
# so we may use 'keep_attr' and set it to TRUE for later recreating bundles
fhir_table_description(
    resource = 'Patient',
    sep           = ' <~> ',
    brackets      = c('<<<', '>>>'),
    rm_empty_cols = FALSE,
    format        = 'wide',
    keep_attr     = TRUE
)

}
